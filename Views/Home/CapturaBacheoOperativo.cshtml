<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Captura de Bacheo - Personal Operativo</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #16a34a;
            --secondary: #15803d;
            --accent: #22c55e;
            --success: #10B981;
            --warning: #F59E0B;
            --danger: #EF4444;
            --dark: #1F2937;
            --light: #F9FAFB;
            --border: #E5E7EB;
            --card-bg: #FFFFFF;
            --text-primary: #111827;
            --text-secondary: #6B7280;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #F3F4F6 0%, #E5E7EB 100%);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            font-size: clamp(1.1rem, 2.5vw, 1.4rem);
            touch-action: manipulation;
        }

        .header {
            background: linear-gradient(135deg, var(--secondary) 0%, var(--primary) 100%);
            color: white;
            padding: clamp(1.5rem, 4vw, 2.5rem);
            box-shadow: 0 4px 20px rgba(22, 163, 74, 0.3);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            gap: clamp(1rem, 3vw, 2rem);
            flex-wrap: wrap;
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: clamp(1rem, 2vw, 1.5rem);
            flex: 1;
        }

        .logo {
            width: clamp(60px, 8vw, 80px);
            height: clamp(60px, 8vw, 80px);
            background: rgba(255,255,255,0.2);
            border-radius: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: clamp(2rem, 4vw, 2.5rem);
            border: 3px solid rgba(255,255,255,0.3);
            backdrop-filter: blur(10px);
        }

        .header-title {
            font-size: clamp(1.5rem, 4vw, 2.2rem);
            font-weight: 800;
            margin-bottom: 0.3rem;
        }

        .header-subtitle {
            font-size: clamp(1rem, 2.5vw, 1.2rem);
            opacity: 0.9;
        }

        .back-btn {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: clamp(0.8rem, 2vw, 1rem) clamp(1.2rem, 3vw, 1.5rem);
            border-radius: 12px;
            font-size: clamp(1rem, 2.5vw, 1.2rem);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            backdrop-filter: blur(10px);
        }

            .back-btn:hover {
                background: rgba(255,255,255,0.3);
                border-color: rgba(255,255,255,0.5);
                transform: translateY(-2px);
            }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: clamp(1.5rem, 4vw, 3rem);
        }

        .status-bar {
            background: white;
            border-radius: 16px;
            padding: clamp(1rem, 2vw, 1.5rem);
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 2px solid var(--border);
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: clamp(0.8rem, 2vw, 1.2rem);
            align-items: center;
        }

        .status-item {
            text-align: center;
            padding: clamp(0.5rem, 1vw, 0.8rem);
        }

        .status-value {
            font-size: clamp(1.4rem, 3.5vw, 1.8rem);
            font-weight: 800;
            color: var(--primary);
            margin-bottom: 0.2rem;
        }

        .status-label {
            font-size: clamp(0.7rem, 1.8vw, 0.9rem);
            color: var(--text-secondary);
            font-weight: 600;
            line-height: 1.2;
        }

        .form-card {
            background: white;
            border-radius: 24px;
            padding: clamp(2rem, 5vw, 3rem);
            box-shadow: 0 8px 40px rgba(0,0,0,0.12);
            border: 3px solid var(--border);
            margin-bottom: clamp(2rem, 4vw, 3rem);
        }

        .form-title {
            font-size: clamp(1.8rem, 4vw, 2.5rem);
            font-weight: 800;
            color: var(--primary);
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: clamp(1rem, 3vw, 1.5rem);
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-label {
            font-size: clamp(1.1rem, 2.5vw, 1.3rem);
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.8rem;
        }

        .form-input, .form-select {
            padding: clamp(1rem, 2.5vw, 1.3rem);
            border: 2px solid var(--border);
            border-radius: 12px;
            font-size: clamp(1.1rem, 2.5vw, 1.3rem);
            background: var(--light);
            color: var(--text-primary);
            transition: all 0.3s ease;
        }

            .form-input:focus, .form-select:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 4px rgba(22, 163, 74, 0.1);
                background: white;
            }

        .calculated-field {
            background: rgba(22, 163, 74, 0.1) !important;
            border-color: var(--primary) !important;
            font-weight: 700 !important;
            color: var(--primary) !important;
        }

        .measurement-section {
            background: rgba(22, 163, 74, 0.05);
            border: 2px solid var(--primary);
            border-radius: 20px;
            padding: clamp(1.5rem, 3vw, 2rem);
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
        }

        .measurement-title {
            font-size: clamp(1.3rem, 3vw, 1.6rem);
            font-weight: 800;
            color: var(--primary);
            margin-bottom: clamp(1rem, 2vw, 1.5rem);
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .gps-section {
            background: rgba(59, 130, 246, 0.05);
            border: 2px solid #3B82F6;
            border-radius: 20px;
            padding: clamp(1.5rem, 3vw, 2rem);
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
            text-align: center;
        }

        .gps-btn {
            background: linear-gradient(135deg, #3B82F6, #1E40AF);
            color: white;
            border: none;
            border-radius: 16px;
            padding: clamp(1.2rem, 3vw, 1.8rem) clamp(2rem, 4vw, 3rem);
            font-size: clamp(1.2rem, 3vw, 1.5rem);
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            margin: 0 auto;
            box-shadow: 0 6px 25px rgba(59, 130, 246, 0.3);
        }

            .gps-btn:hover {
                transform: translateY(-4px);
                box-shadow: 0 10px 40px rgba(59, 130, 246, 0.4);
            }

            .gps-btn:disabled {
                background: #9CA3AF;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .location-display {
            background: rgba(16, 185, 129, 0.1);
            border: 2px solid #10B981;
            border-radius: 12px;
            padding: clamp(1rem, 2vw, 1.5rem);
            margin-top: clamp(1rem, 2vw, 1.5rem);
            display: none;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            color: #10B981;
            font-weight: 600;
            font-size: clamp(1rem, 2.5vw, 1.2rem);
        }

        .photo-section {
            background: rgba(245, 158, 11, 0.05);
            border: 2px solid #F59E0B;
            border-radius: 20px;
            padding: clamp(1.5rem, 3vw, 2rem);
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
        }

        .photo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: clamp(1rem, 3vw, 1.5rem);
            margin-top: clamp(1rem, 2vw, 1.5rem);
        }

        .photo-capture {
            background: white;
            border: 3px dashed #F59E0B;
            border-radius: 16px;
            padding: clamp(1.5rem, 3vw, 2rem);
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 180px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
        }

            .photo-capture:hover {
                border-color: #D97706;
                background: rgba(245, 158, 11, 0.05);
                transform: translateY(-4px);
            }

            .photo-capture.has-photo {
                border-style: solid;
                border-color: #10B981;
            }

            .photo-capture img {
                width: 100%;
                height: 150px;
                object-fit: cover;
                border-radius: 12px;
                margin-bottom: 0.5rem;
            }

            .photo-capture i {
                font-size: clamp(2rem, 5vw, 3rem);
                color: #F59E0B;
                margin-bottom: 0.8rem;
            }

            .photo-capture p {
                font-size: clamp(1rem, 2.5vw, 1.2rem);
                color: #F59E0B;
                font-weight: 700;
            }

        .photo-remove {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 32px;
            height: 32px;
            background: #EF4444;
            border: none;
            border-radius: 50%;
            color: white;
            cursor: pointer;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.4);
        }

        .multiple-section {
            background: rgba(139, 69, 19, 0.05);
            border: 2px solid #8B4513;
            border-radius: 20px;
            padding: clamp(1.5rem, 3vw, 2rem);
            margin-bottom: clamp(1.5rem, 3vw, 2rem);
        }

        .measurements-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: clamp(1rem, 2vw, 1.5rem);
            flex-wrap: wrap;
            gap: 1rem;
        }

        .measurements-count {
            font-size: clamp(1.1rem, 2.5vw, 1.3rem);
            font-weight: 700;
            color: #8B4513;
        }

        .measurements-actions {
            display: flex;
            gap: 0.8rem;
            flex-wrap: wrap;
        }

        .action-btn {
            background: linear-gradient(135deg, #8B4513, #A0522D);
            color: white;
            border: none;
            border-radius: 10px;
            padding: clamp(0.8rem, 2vw, 1rem) clamp(1.2rem, 2.5vw, 1.5rem);
            font-size: clamp(0.9rem, 2vw, 1.1rem);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .action-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(139, 69, 19, 0.3);
            }

            .action-btn.secondary {
                background: linear-gradient(135deg, var(--primary), var(--accent));
            }

            .action-btn.danger {
                background: linear-gradient(135deg, #EF4444, #DC2626);
            }

        .measurements-table {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            border: 2px solid #E5E7EB;
            margin-bottom: 1rem;
        }

        .table-header {
            background: linear-gradient(135deg, #8B4513, #A0522D);
            color: white;
            padding: clamp(0.8rem, 2vw, 1rem);
            display: grid;
            grid-template-columns: 40px 1fr 1fr 1fr 1fr 60px;
            gap: clamp(0.5rem, 1vw, 0.8rem);
            align-items: center;
            font-weight: 700;
            font-size: clamp(0.9rem, 2vw, 1.1rem);
        }

        .table-row {
            padding: clamp(0.8rem, 2vw, 1rem);
            display: grid;
            grid-template-columns: 40px 1fr 1fr 1fr 1fr 60px;
            gap: clamp(0.5rem, 1vw, 0.8rem);
            align-items: center;
            border-bottom: 1px solid #E5E7EB;
            transition: all 0.3s ease;
        }

            .table-row:hover {
                background: rgba(139, 69, 19, 0.05);
            }

            .table-row:last-child {
                border-bottom: none;
            }

        .row-number {
            font-weight: 700;
            color: var(--primary);
            text-align: center;
            font-size: clamp(0.9rem, 2vw, 1.1rem);
        }

        .table-input {
            padding: clamp(0.6rem, 1.5vw, 0.8rem);
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            font-size: clamp(0.9rem, 2vw, 1.1rem);
            width: 100%;
            transition: all 0.3s ease;
        }

            .table-input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 2px rgba(22, 163, 74, 0.1);
            }

            .table-input.calculated {
                background: rgba(22, 163, 74, 0.1);
                border-color: var(--primary);
                font-weight: 700;
                color: var(--primary);
            }

        .remove-row-btn {
            background: #EF4444;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 0.4rem;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            width: 100%;
        }

            .remove-row-btn:hover {
                background: #DC2626;
                transform: scale(1.05);
            }

        .quick-add-section {
            background: rgba(59, 130, 246, 0.05);
            border: 2px solid #3B82F6;
            border-radius: 12px;
            padding: clamp(1rem, 2vw, 1.5rem);
            margin-top: 1rem;
        }

        .quick-add-title {
            font-size: clamp(1.1rem, 2.5vw, 1.3rem);
            font-weight: 700;
            color: #3B82F6;
            margin-bottom: 1rem;
            text-align: center;
        }

        .quick-add-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: clamp(0.8rem, 2vw, 1rem);
            align-items: end;
        }

        .quick-add-input {
            padding: clamp(0.8rem, 2vw, 1rem);
            border: 2px solid #3B82F6;
            border-radius: 8px;
            font-size: clamp(0.9rem, 2vw, 1.1rem);
            text-align: center;
            font-weight: 600;
        }

        .quick-add-btn {
            background: linear-gradient(135deg, #3B82F6, #1E40AF);
            color: white;
            border: none;
            border-radius: 8px;
            padding: clamp(0.8rem, 2vw, 1rem);
            font-size: clamp(0.9rem, 2vw, 1.1rem);
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .quick-add-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
            }

        .save-btn {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: white;
            border: none;
            border-radius: 20px;
            padding: clamp(1.5rem, 4vw, 2rem) clamp(2rem, 5vw, 3rem);
            font-size: clamp(1.3rem, 3.5vw, 1.8rem);
            font-weight: 800;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            box-shadow: 0 8px 30px rgba(22, 163, 74, 0.3);
            margin-top: clamp(2rem, 4vw, 3rem);
        }

            .save-btn:hover {
                transform: translateY(-6px);
                box-shadow: 0 15px 50px rgba(22, 163, 74, 0.4);
            }

            .save-btn:disabled {
                background: #9CA3AF;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .notification {
            position: fixed;
            top: clamp(20px, 3vw, 40px);
            right: clamp(20px, 3vw, 40px);
            padding: clamp(1rem, 3vw, 1.5rem);
            border-radius: 16px;
            box-shadow: 0 8px 40px rgba(0,0,0,0.3);
            z-index: 10000;
            font-size: clamp(1rem, 2.5vw, 1.3rem);
            font-weight: 600;
            max-width: clamp(280px, 40vw, 400px);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.4s ease;
            cursor: pointer;
        }

            .notification.success {
                background: var(--success);
                color: white;
            }

            .notification.error {
                background: var(--danger);
                color: white;
            }

            .notification.info {
                background: var(--primary);
                color: white;
            }

            .notification.warning {
                background: var(--warning);
                color: white;
            }

            .notification.show {
                opacity: 1;
                transform: translateX(0);
            }

        input[type="file"] {
            display: none;
        }

        button, .form-input, .form-select {
            -webkit-tap-highlight-color: transparent;
            user-select: none;
        }

        * {
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo-section">
                <div class="logo">
                    <i class="fas fa-camera"></i>
                </div>
                <div>
                    <h1 class="header-title">Captura de Bacheo</h1>
                    <p class="header-subtitle">Personal Operativo - Monclova</p>
                </div>
            </div>
            <a href="/Home/OperativoBacheo" class="back-btn">
                <i class="fas fa-arrow-left"></i>
                Regresar
            </a>
        </div>
    </header>

    <div class="container">
        <div class="status-bar">
            <div class="status-grid">
                <div class="status-item">
                    <div class="status-value" id="todayCount">0</div>
                    <div class="status-label">Registros Hoy</div>
                </div>
                <div class="status-item">
                    <div class="status-value" id="currentTime">--:--</div>
                    <div class="status-label">Hora Actual</div>
                </div>
                <div class="status-item">
                    <div class="status-value" id="totalArea">0</div>
                    <div class="status-label">Área Total (m²)</div>
                </div>
                <div class="status-item">
                    <div class="status-value" id="totalLiga">0</div>
                    <div class="status-label">Liga Total (L)</div>
                </div>
            </div>
        </div>

        <form class="form-card" id="captureForm">
            <h2 class="form-title">
                <i class="fas fa-plus-circle"></i>
                Nuevo Registro de Bacheo
            </h2>

            <!-- Información Básica -->
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Sector</label>
                    <input type="text" class="form-input" id="sector" required placeholder="Ej: 311">
                </div>
                <div class="form-group">
                    <label class="form-label">Camión</label>
                    <input type="text" class="form-input" id="truck" required placeholder="Ej: 19">
                </div>
                <div class="form-group">
                    <label class="form-label">Fecha</label>
                    <input type="date" class="form-input" id="date" required>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Colonia</label>
                    <input type="text" class="form-input" id="colony" required placeholder="Ej: ZONA CENTRO">
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Calle</label>
                    <input type="text" class="form-input" id="street" required placeholder="Ej: CALLE PROGRESO">
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Entre qué calles</label>
                    <input type="text" class="form-input" id="between" required placeholder="Ej: ALTOS IBARRA Y MUTUALISMO">
                </div>
            </div>

            <!-- Ubicación GPS -->
            <div class="gps-section">
                <h3 class="measurement-title">
                    <i class="fas fa-map-marker-alt"></i>
                    Ubicación GPS
                </h3>
                <button type="button" class="gps-btn" id="gpsBtn" onclick="captureLocation()">
                    <i class="fas fa-crosshairs"></i>
                    Obtener Ubicación Actual
                </button>
                <div class="location-display" id="locationDisplay">
                    <i class="fas fa-check-circle"></i>
                    <span id="locationText">Ubicación capturada</span>
                </div>
            </div>

            <!-- Medidas Múltiples -->
            <div class="multiple-section">
                <h3 class="measurement-title">
                    <i class="fas fa-ruler-combined"></i>
                    Medidas de Bacheo
                </h3>

                <div class="measurements-header">
                    <div class="measurements-count" id="measurementsCount">0 medidas registradas</div>
                    <div class="measurements-actions">
                        <button type="button" class="action-btn" onclick="addMeasurementRow()">
                            <i class="fas fa-plus"></i>
                            Agregar
                        </button>
                        <button type="button" class="action-btn secondary" onclick="duplicateLastMeasurement()">
                            <i class="fas fa-copy"></i>
                            Duplicar
                        </button>
                        <button type="button" class="action-btn danger" onclick="clearAllMeasurements()">
                            <i class="fas fa-trash"></i>
                            Limpiar
                        </button>
                    </div>
                </div>

                <div class="measurements-table">
                    <div class="table-header">
                        <div>#</div>
                        <div>Largo (m)</div>
                        <div>Ancho (m)</div>
                        <div>Área (m²)</div>
                        <div>Liga (L)</div>
                        <div>Acción</div>
                    </div>
                    <div id="measurementsTableBody">
                        <!-- Se llenarán dinámicamente -->
                    </div>
                </div>

                <div class="quick-add-section">
                    <div class="quick-add-title">
                        <i class="fas fa-zap"></i>
                        Entrada Rápida
                    </div>
                    <div class="quick-add-form">
                        <div>
                            <label style="display: block; font-size: 0.9rem; margin-bottom: 0.5rem; font-weight: 600;">Largo</label>
                            <input type="number" step="0.01" class="quick-add-input" id="quickLargo" placeholder="0.00">
                        </div>
                        <div>
                            <label style="display: block; font-size: 0.9rem; margin-bottom: 0.5rem; font-weight: 600;">Ancho</label>
                            <input type="number" step="0.01" class="quick-add-input" id="quickAncho" placeholder="0.00">
                        </div>
                        <div>
                            <label style="display: block; font-size: 0.9rem; margin-bottom: 0.5rem; font-weight: 600;">Cantidad</label>
                            <input type="number" min="1" max="50" class="quick-add-input" id="quickCantidad" value="1" placeholder="1">
                        </div>
                        <div>
                            <label style="display: block; font-size: 0.9rem; margin-bottom: 0.5rem; color: transparent;">Agregar</label>
                            <button type="button" class="quick-add-btn" onclick="addQuickMeasurements()">
                                <i class="fas fa-plus-circle"></i>
                                Agregar
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Fotografías -->
            <div class="photo-section">
                <h3 class="measurement-title">
                    <i class="fas fa-camera"></i>
                    Fotografías (Opcional)
                </h3>
                <div class="photo-grid">
                    <div class="photo-capture" onclick="triggerPhotoInput('antes')">
                        <i class="fas fa-camera"></i>
                        <p>ANTES</p>
                        <img id="previewAntes" style="display:none;">
                        <button type="button" class="photo-remove" id="removeAntes" onclick="removePhoto(event, 'antes')">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="photo-capture" onclick="triggerPhotoInput('durante')">
                        <i class="fas fa-tools"></i>
                        <p>DURANTE</p>
                        <img id="previewDurante" style="display:none;">
                        <button type="button" class="photo-remove" id="removeDurante" onclick="removePhoto(event, 'durante')">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="photo-capture" onclick="triggerPhotoInput('despues')">
                        <i class="fas fa-check-circle"></i>
                        <p>DESPUÉS</p>
                        <img id="previewDespues" style="display:none;">
                        <button type="button" class="photo-remove" id="removeDespues" onclick="removePhoto(event, 'despues')">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>

            <button type="submit" class="save-btn" id="saveBtn">
                <i class="fas fa-save"></i>
                Guardar Registro
            </button>
        </form>
    </div>

    <!-- Inputs ocultos para fotos -->
    <input type="file" id="photoInputAntes" accept="image/*" capture="environment">
    <input type="file" id="photoInputDurante" accept="image/*" capture="environment">
    <input type="file" id="photoInputDespues" accept="image/*" capture="environment">

    <div id="notification" class="notification">
        <span id="notificationText"></span>
    </div>

    <script>
        // Variables globales
        let records = [];
        let currentLocation = null;
        let measurementCount = 0;
        let photos = {
            antes: '',
            durante: '',
            despues: ''
        };

        // Factor de liga fijo (0.05 litros por m²)
        const FACTOR_LIGA = 0.05;

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            initializeSystem();
            addMeasurement(); // Agregar primera medida
        });

        function initializeSystem() {
            updateTime();
            updateStats();
            setCurrentDate();
            loadRecords();
            setupEventListeners();

            setInterval(updateTime, 60000);

            showNotification('Sistema de captura listo', 'success');
        }

        function setupEventListeners() {
            document.getElementById('captureForm').addEventListener('submit', handleFormSubmit);
            document.getElementById('photoInputAntes').addEventListener('change', function(e) { handlePhotoUpload(e, 'antes'); });
            document.getElementById('photoInputDurante').addEventListener('change', function(e) { handlePhotoUpload(e, 'durante'); });
            document.getElementById('photoInputDespues').addEventListener('change', function(e) { handlePhotoUpload(e, 'despues'); });
        }

        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('es-MX', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            });
            document.getElementById('currentTime').textContent = timeString;
        }

        function setCurrentDate() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
        }

        function updateStats() {
            const today = new Date().toISOString().split('T')[0];
            const todayRecords = records.filter(r => r.date === today);

            document.getElementById('todayCount').textContent = todayRecords.length;

            const totalArea = todayRecords.reduce((sum, r) => {
                return sum + (r.measurements?.reduce((mSum, m) => mSum + parseFloat(m.area || 0), 0) || 0);
            }, 0);

            const totalLiga = todayRecords.reduce((sum, r) => {
                return sum + (r.measurements?.reduce((mSum, m) => mSum + parseFloat(m.liga || 0), 0) || 0);
            }, 0);

            document.getElementById('totalArea').textContent = totalArea.toFixed(2);
            document.getElementById('totalLiga').textContent = totalLiga.toFixed(2);
        }

        function captureLocation() {
            const gpsBtn = document.getElementById('gpsBtn');

            if (!navigator.geolocation) {
                showNotification('GPS no disponible en este dispositivo', 'error');
                return;
            }

            gpsBtn.disabled = true;
            gpsBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Obteniendo GPS...';

            navigator.geolocation.getCurrentPosition(
                function(position) {
                    currentLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,
                        timestamp: new Date().toISOString()
                    };

                    document.getElementById('locationDisplay').style.display = 'flex';
                    document.getElementById('locationText').textContent =
                        `Lat: ${currentLocation.lat.toFixed(6)}, Lng: ${currentLocation.lng.toFixed(6)}`;

                    gpsBtn.innerHTML = '<i class="fas fa-check"></i> Ubicación Capturada';
                    gpsBtn.style.background = 'linear-gradient(135deg, #10B981, #059669)';

                    showNotification('Ubicación GPS capturada correctamente', 'success');
                },
                function(error) {
                    gpsBtn.disabled = false;
                    gpsBtn.innerHTML = '<i class="fas fa-crosshairs"></i> Obtener Ubicación Actual';
                    showNotification('Error al obtener GPS: ' + error.message, 'error');
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 60000
                }
            );
        }

        function addMeasurementRow() {
            measurementCount++;
            const tbody = document.getElementById('measurementsTableBody');

            const row = document.createElement('div');
            row.className = 'table-row';
            row.id = `measurement-row-${measurementCount}`;

            row.innerHTML = `
                <div class="row-number">${measurementCount}</div>
                <div>
                    <input type="number" step="0.01" class="table-input" id="largo-${measurementCount}"
                           placeholder="0.00" oninput="calculateTableRow(${measurementCount})" required>
                </div>
                <div>
                    <input type="number" step="0.01" class="table-input" id="ancho-${measurementCount}"
                           placeholder="0.00" oninput="calculateTableRow(${measurementCount})" required>
                </div>
                <div>
                    <input type="number" step="0.01" class="table-input calculated"
                           id="area-${measurementCount}" placeholder="Auto" readonly>
                </div>
                <div>
                    <input type="number" step="0.01" class="table-input calculated"
                           id="liga-${measurementCount}" placeholder="Auto" readonly>
                </div>
                <div>
                    <button type="button" class="remove-row-btn" onclick="removeMeasurementRow(${measurementCount})"
                            ${measurementCount === 1 ? 'style="display:none;"' : ''}>
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            tbody.appendChild(row);
            updateMeasurementsCount();

            // Focus en el primer input de la nueva fila
            setTimeout(() => {
                document.getElementById(`largo-${measurementCount}`).focus();
            }, 100);
        }

        function removeMeasurementRow(id) {
            const totalRows = document.querySelectorAll('.table-row').length;
            if (totalRows <= 1) {
                showNotification('Debe mantener al menos una medida', 'warning');
                return;
            }

            document.getElementById(`measurement-row-${id}`).remove();
            updateMeasurementsCount();
            showNotification('Medida eliminada', 'info');
        }

        function calculateTableRow(id) {
            const largo = parseFloat(document.getElementById(`largo-${id}`).value) || 0;
            const ancho = parseFloat(document.getElementById(`ancho-${id}`).value) || 0;

            const area = (largo * ancho).toFixed(2);
            const liga = (area * FACTOR_LIGA).toFixed(2);

            document.getElementById(`area-${id}`).value = area;
            document.getElementById(`liga-${id}`).value = liga;
        }

        function duplicateLastMeasurement() {
            const rows = document.querySelectorAll('.table-row');
            if (rows.length === 0) {
                addMeasurementRow();
                return;
            }

            const lastRow = rows[rows.length - 1];
            const lastId = lastRow.id.split('-')[2];
            const lastLargo = document.getElementById(`largo-${lastId}`).value;
            const lastAncho = document.getElementById(`ancho-${lastId}`).value;

            addMeasurementRow();

            if (lastLargo) {
                document.getElementById(`largo-${measurementCount}`).value = lastLargo;
            }
            if (lastAncho) {
                document.getElementById(`ancho-${measurementCount}`).value = lastAncho;
                calculateTableRow(measurementCount);
            }

            showNotification('Medida duplicada', 'success');
        }

        function clearAllMeasurements() {
            if (!confirm('¿Eliminar todas las medidas?')) return;

            document.getElementById('measurementsTableBody').innerHTML = '';
            measurementCount = 0;
            addMeasurementRow();
            showNotification('Medidas eliminadas', 'info');
        }

        function addQuickMeasurements() {
            const largo = document.getElementById('quickLargo').value;
            const ancho = document.getElementById('quickAncho').value;
            const cantidad = parseInt(document.getElementById('quickCantidad').value) || 1;

            if (!largo || !ancho || parseFloat(largo) <= 0 || parseFloat(ancho) <= 0) {
                showNotification('Complete las medidas correctamente', 'error');
                return;
            }

            if (cantidad > 50) {
                showNotification('Máximo 50 medidas por vez', 'error');
                return;
            }

            for (let i = 0; i < cantidad; i++) {
                addMeasurementRow();
                document.getElementById(`largo-${measurementCount}`).value = largo;
                document.getElementById(`ancho-${measurementCount}`).value = ancho;
                calculateTableRow(measurementCount);
            }

            // Limpiar formulario rápido
            document.getElementById('quickLargo').value = '';
            document.getElementById('quickAncho').value = '';
            document.getElementById('quickCantidad').value = '1';

            showNotification(`${cantidad} medidas agregadas`, 'success');
        }

        function updateMeasurementsCount() {
            const count = document.querySelectorAll('.table-row').length;
            document.getElementById('measurementsCount').textContent = `${count} medida${count !== 1 ? 's' : ''} registrada${count !== 1 ? 's' : ''}`;
        }

        function triggerPhotoInput(type) {
            document.getElementById(`photoInput${type.charAt(0).toUpperCase() + type.slice(1)}`).click();
        }

        function handlePhotoUpload(e, type) {
            const file = e.target.files[0];
            if (!file) return;

            if (file.size > 5 * 1024 * 1024) {
                showNotification('La imagen es demasiado grande. Máximo 5MB', 'error');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                photos[type] = event.target.result;

                const preview = document.getElementById(`preview${type.charAt(0).toUpperCase() + type.slice(1)}`);
                const capture = preview.parentElement;
                const removeBtn = document.getElementById(`remove${type.charAt(0).toUpperCase() + type.slice(1)}`);

                preview.src = event.target.result;
                preview.style.display = 'block';
                capture.classList.add('has-photo');
                removeBtn.style.display = 'flex';

                capture.querySelector('i').style.display = 'none';
                capture.querySelector('p').style.display = 'none';

                showNotification(`Foto ${type} capturada`, 'success');
            };
            reader.readAsDataURL(file);
        }

        function removePhoto(event, type) {
            event.stopPropagation();

            photos[type] = '';

            const preview = document.getElementById(`preview${type.charAt(0).toUpperCase() + type.slice(1)}`);
            const capture = preview.parentElement;
            const removeBtn = document.getElementById(`remove${type.charAt(0).toUpperCase() + type.slice(1)}`);
            const input = document.getElementById(`photoInput${type.charAt(0).toUpperCase() + type.slice(1)}`);

            preview.style.display = 'none';
            preview.src = '';
            capture.classList.remove('has-photo');
            removeBtn.style.display = 'none';
            capture.querySelector('i').style.display = 'block';
            capture.querySelector('p').style.display = 'block';
            input.value = '';

            showNotification(`Foto ${type} eliminada`, 'info');
        }

        function handleFormSubmit(e) {
            e.preventDefault();

            // Recopilar todas las medidas de la tabla
            const measurements = [];
            const tableRows = document.querySelectorAll('.table-row');

            for (let row of tableRows) {
                const id = row.id.split('-')[2];
                const largo = document.getElementById(`largo-${id}`).value;
                const ancho = document.getElementById(`ancho-${id}`).value;
                const area = document.getElementById(`area-${id}`).value;
                const liga = document.getElementById(`liga-${id}`).value;

                if (!largo || !ancho || parseFloat(largo) <= 0 || parseFloat(ancho) <= 0) {
                    showNotification(`Complete las medidas de la fila ${row.querySelector('.row-number').textContent}`, 'error');
                    document.getElementById(`largo-${id}`).focus();
                    return;
                }

                measurements.push({
                    largo: parseFloat(largo),
                    ancho: parseFloat(ancho),
                    area: parseFloat(area),
                    liga: parseFloat(liga)
                });
            }

            if (measurements.length === 0) {
                showNotification('Agregue al menos una medida', 'error');
                return;
            }

            // Crear registro
            const record = {
                id: Date.now(),
                folio: generateFolio(),
                date: document.getElementById('date').value,
                sector: document.getElementById('sector').value,
                truck: document.getElementById('truck').value,
                colony: document.getElementById('colony').value,
                street: document.getElementById('street').value,
                between: document.getElementById('between').value,
                measurements: measurements,
                location: currentLocation,
                photos: {...photos},
                timestamp: new Date().toISOString()
            };

            // Guardar registro
            records.push(record);
            saveRecords();

            const totalMedidas = measurements.length;
            const totalArea = measurements.reduce((sum, m) => sum + m.area, 0).toFixed(2);
            const totalLiga = measurements.reduce((sum, m) => sum + m.liga, 0).toFixed(2);

            showNotification(`Registro guardado: ${totalMedidas} medidas | ${totalArea} m² | ${totalLiga} L`, 'success');

            // Limpiar formulario
            resetForm();
            updateStats();
        }

        function generateFolio() {
            const date = new Date();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear().toString().slice(-2);
            const time = date.getTime().toString().slice(-4);
            return `BCH${month}${year}-${time}`;
        }

        function resetForm() {
            document.getElementById('captureForm').reset();
            setCurrentDate();

            // Limpiar ubicación
            currentLocation = null;
            document.getElementById('locationDisplay').style.display = 'none';
            const gpsBtn = document.getElementById('gpsBtn');
            gpsBtn.disabled = false;
            gpsBtn.innerHTML = '<i class="fas fa-crosshairs"></i> Obtener Ubicación Actual';
            gpsBtn.style.background = 'linear-gradient(135deg, #3B82F6, #1E40AF)';

            // Limpiar fotos
            photos = { antes: '', durante: '', despues: '' };
            resetPhotoPreviews();

            // Limpiar tabla de medidas
            document.getElementById('measurementsTableBody').innerHTML = '';
            measurementCount = 0;
            addMeasurementRow();

            // Limpiar formulario de entrada rápida
            document.getElementById('quickLargo').value = '';
            document.getElementById('quickAncho').value = '';
            document.getElementById('quickCantidad').value = '1';
        }

        function resetPhotoPreviews() {
            ['antes', 'durante', 'despues'].forEach(type => {
                const preview = document.getElementById(`preview${type.charAt(0).toUpperCase() + type.slice(1)}`);
                const capture = preview.parentElement;
                const removeBtn = document.getElementById(`remove${type.charAt(0).toUpperCase() + type.slice(1)}`);

                preview.style.display = 'none';
                preview.src = '';
                capture.classList.remove('has-photo');
                removeBtn.style.display = 'none';
                capture.querySelector('i').style.display = 'block';
                capture.querySelector('p').style.display = 'block';
            });
        }

        function loadRecords() {
            const saved = localStorage.getItem('bacheoOperativoRecords');
            if (saved) {
                records = JSON.parse(saved);
            }
        }

        function saveRecords() {
            localStorage.setItem('bacheoOperativoRecords', JSON.stringify(records));
        }

        function showNotification(message, type = 'info') {
            const notification = document.getElementById('notification');
            const text = document.getElementById('notificationText');

            notification.className = `notification ${type}`;
            text.textContent = message;
            notification.classList.add('show');

            setTimeout(() => {
                notification.classList.remove('show');
            }, 4000);

            notification.addEventListener('click', () => {
                notification.classList.remove('show');
            });
        }

        // Prevenir zoom accidental en dispositivos móviles
        document.addEventListener('touchstart', function(event) {
            if (event.touches.length > 1) {
                event.preventDefault();
            }
        });

        let lastTouchEnd = 0;
        document.addEventListener('touchend', function(event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);

        console.log('✅ Sistema de Captura de Bacheo Operativo v1.0');
        console.log('✅ Cálculos automáticos: Área y Liga');
        console.log('✅ Factor de liga fijo: 0.5 L/m²');
        console.log('✅ GPS simplificado: Solo ubicación actual');
        console.log('✅ Medidas múltiples con diferentes dimensiones');
        console.log('✅ Optimizado para tablets y personal operativo');
    </script>
</body>
</html>