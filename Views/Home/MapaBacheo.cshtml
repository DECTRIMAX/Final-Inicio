<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trazado de Rutas - Sistema de Bacheo</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #DC2626;
            --primary-light: #F87171;
            --secondary: #B91C1C;
            --success: #10B981;
            --warning: #F59E0B;
            --danger: #EF4444;
            --info: #3B82F6;
            --purple: #8B5CF6;
            --bg-primary: #0F0F0F;
            --bg-secondary: #1A1A1A;
            --bg-tertiary: #2A2A2A;
            --text-primary: #FFFFFF;
            --text-secondary: #B3B3B3;
            --border: #333333;
            --card-bg: #1F1F1F;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #111111 0%, #2A2A2A 100%);
            padding: 1.8rem 2rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
            position: relative;
            z-index: 1000;
            border-bottom: 2px solid var(--border);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 2rem;
            max-width: 100%;
            flex-wrap: wrap;
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 1.8rem;
            flex: 1;
            min-width: 300px;
        }

        .logo-container {
            display: flex;
            gap: 1.2rem;
            flex-shrink: 0;
        }

        .logo {
            width: 90px;
            height: 90px;
            background: white;
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 3px solid var(--primary);
            box-shadow: 0 8px 24px rgba(220, 38, 38, 0.5);
            overflow: hidden;
            padding: 6px;
            transition: transform 0.3s ease;
        }

            .logo:hover {
                transform: scale(1.05);
            }

            .logo img {
                width: 100%;
                height: 100%;
                object-fit: contain;
                background: white;
            }

            .logo i {
                color: var(--primary);
                font-size: 2.5rem;
            }

        .header-info {
            flex: 1;
            min-width: 250px;
        }

            .header-info h1 {
                font-size: 1.65rem;
                font-weight: 800;
                color: var(--text-primary);
                margin-bottom: 0.4rem;
                line-height: 1.2;
            }

            .header-info p {
                font-size: 1rem;
                color: var(--text-secondary);
                line-height: 1.3;
            }

        .header-actions {
            display: flex;
            gap: 0.8rem;
            flex-wrap: wrap;
        }

        .btn {
            padding: 0.6rem 1rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.4rem;
            font-size: 0.85rem;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
            }

        .btn-secondary {
            background: var(--bg-tertiary);
            color: var(--text-secondary);
            border: 1px solid var(--border);
        }

            .btn-secondary:hover {
                border-color: var(--primary);
                color: var(--text-primary);
            }

        .btn-success {
            background: var(--success);
            color: white;
        }

            .btn-success:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
            }

        .btn-purple {
            background: linear-gradient(135deg, var(--purple), #A78BFA);
            color: white;
        }

            .btn-purple:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
            }

        .btn-info {
            background: linear-gradient(135deg, var(--info), #60A5FA);
            color: white;
        }

            .btn-info:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
            }

        .nav-toggle {
            position: fixed;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            border: none;
            border-radius: 50% 0 0 50%;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            box-shadow: -4px 0 20px rgba(220, 38, 38, 0.5);
            z-index: 1500;
            transition: all 0.3s ease;
        }

            .nav-toggle:hover {
                width: 56px;
            }

        .nav-panel {
            position: fixed;
            right: -350px;
            top: 0;
            width: 320px;
            height: 100vh;
            background: var(--card-bg);
            border-left: 2px solid var(--border);
            box-shadow: -8px 0 40px rgba(0, 0, 0, 0.8);
            z-index: 1400;
            transition: right 0.3s ease;
            overflow-y: auto;
            padding: 1.5rem 1rem;
        }

            .nav-panel.open {
                right: 0;
            }

        .nav-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1399;
            display: none;
        }

            .nav-overlay.show {
                display: block;
            }

        .nav-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--border);
        }

        .nav-logo {
            width: 48px;
            height: 48px;
            background: white;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.4rem;
        }

            .nav-logo i {
                color: var(--primary);
            }

        .nav-header h3 {
            font-size: 1.15rem;
            color: var(--primary);
            font-weight: 800;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.95rem;
            margin: 0.5rem 0;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .nav-item:hover {
                background: var(--bg-tertiary);
                border-color: var(--primary);
                transform: translateX(-5px);
            }

            .nav-item.active {
                background: var(--primary);
                border-color: var(--primary);
            }

            .nav-item i {
                font-size: 1.25rem;
                color: var(--primary);
                width: 30px;
                text-align: center;
            }

            .nav-item.active i,
            .nav-item.active span {
                color: white;
            }

            .nav-item span {
                font-weight: 600;
                color: var(--text-secondary);
                font-size: 0.92rem;
            }

        .filter-section {
            margin-bottom: 1.5rem;
        }

        .filter-title {
            font-size: 0.9rem;
            font-weight: 700;
            color: var(--text-secondary);
            margin-bottom: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.6rem;
        }

        .filter-item {
            display: flex;
            align-items: center;
            gap: 0.8rem;
            padding: 0.8rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .filter-item:hover {
                background: var(--bg-tertiary);
                border-color: var(--primary);
            }

            .filter-item input[type="checkbox"] {
                width: 18px;
                height: 18px;
                cursor: pointer;
            }

            .filter-item label {
                flex: 1;
                cursor: pointer;
                font-size: 0.88rem;
                color: var(--text-secondary);
            }

        select, input[type="date"], input[type="text"], input[type="number"] {
            width: 100%;
            padding: 0.7rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            color: var(--text-primary);
            font-size: 0.85rem;
            cursor: pointer;
        }

        .map-container {
            position: absolute;
            top: 165px;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1;
        }

        #map {
            width: 100%;
            height: 100%;
        }

        .fab-container {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            z-index: 999;
        }

        .fab {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            color: white;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            box-shadow: 0 8px 30px rgba(220, 38, 38, 0.5);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .fab:hover {
                transform: scale(1.1) rotate(90deg);
                box-shadow: 0 12px 40px rgba(220, 38, 38, 0.7);
            }

            .fab.fab-route {
                background: linear-gradient(135deg, var(--purple), #A78BFA);
                box-shadow: 0 8px 30px rgba(139, 92, 246, 0.5);
            }

                .fab.fab-route:hover {
                    box-shadow: 0 12px 40px rgba(139, 92, 246, 0.7);
                    transform: scale(1.1);
                }

                .fab.fab-route.active {
                    background: linear-gradient(135deg, var(--success), #34D399);
                    box-shadow: 0 8px 30px rgba(16, 185, 129, 0.5);
                }

        .modal {
            display: none;
            position: fixed;
            bottom: 0;
            right: 0;
            width: 400px;
            max-width: 100%;
            background: var(--card-bg);
            border-radius: 15px 15px 0 0;
            border: 2px solid var(--border);
            box-shadow: -8px -8px 40px rgba(0, 0, 0, 0.8);
            z-index: 1300;
            max-height: 80vh;
            overflow-y: auto;
        }

            .modal.active {
                display: block;
            }

            .modal.minimized {
                max-height: 60px;
                overflow: hidden;
            }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            border-bottom: 2px solid var(--border);
            background: var(--bg-tertiary);
            cursor: pointer;
        }

        .modal-title {
            font-size: 1.1rem;
            font-weight: 800;
            color: var(--primary);
        }

        .modal-actions {
            display: flex;
            gap: 0.5rem;
        }

        .modal-btn {
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 1.1rem;
            cursor: pointer;
            padding: 0.3rem;
            transition: all 0.3s ease;
        }

            .modal-btn:hover {
                color: var(--primary);
            }

        .modal-body {
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.4rem;
            font-weight: 600;
            color: var(--text-secondary);
            font-size: 0.85rem;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 0.7rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            color: var(--text-primary);
            font-size: 0.9rem;
            font-family: inherit;
        }

            .form-input:focus, .form-select:focus, .form-textarea:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
            }

        .location-button {
            width: 100%;
            padding: 1rem;
            background: linear-gradient(135deg, var(--info), #60A5FA);
            border: none;
            border-radius: 8px;
            color: white;
            font-weight: 700;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

            .location-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
            }

            .location-button.active {
                background: linear-gradient(135deg, var(--success), #34D399);
            }

        .location-display {
            padding: 0.8rem;
            background: var(--bg-tertiary);
            border: 1px solid var(--success);
            border-radius: 8px;
            color: var(--text-secondary);
            font-size: 0.85rem;
            text-align: center;
            margin-top: 0.5rem;
        }

        .route-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            max-height: 300px;
            overflow-y: auto;
        }

        .route-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .route-item:hover {
                background: var(--bg-tertiary);
                border-color: var(--purple);
            }

            .route-item.selected {
                background: var(--purple);
                border-color: var(--purple);
            }

                .route-item.selected .route-info {
                    color: white;
                }

        .route-info {
            flex: 1;
            color: var(--text-secondary);
            font-size: 0.85rem;
        }

            .route-info strong {
                display: block;
                color: var(--text-primary);
                font-size: 0.9rem;
                margin-bottom: 0.2rem;
            }

        .route-actions {
            display: flex;
            gap: 0.3rem;
        }

        .route-btn {
            padding: 0.4rem 0.6rem;
            border: none;
            border-radius: 6px;
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .notification {
            position: fixed;
            top: 1.5rem;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.9rem 1.3rem;
            border-radius: 10px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.5);
            z-index: 3000;
            font-weight: 600;
            display: none;
            align-items: center;
            gap: 0.7rem;
            font-size: 0.9rem;
            min-width: 300px;
        }

            .notification.show {
                display: flex;
            }

            .notification.success {
                background: var(--success);
                color: white;
            }

            .notification.error {
                background: var(--danger);
                color: white;
            }

            .notification.info {
                background: var(--info);
                color: white;
            }

        .map-instruction {
            position: fixed;
            top: 185px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--purple);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 10px;
            font-weight: 600;
            z-index: 1200;
            box-shadow: 0 6px 20px rgba(139, 92, 246, 0.5);
            display: none;
            max-width: 90%;
            text-align: center;
        }

            .map-instruction.show {
                display: block;
            }

        .route-stats {
            background: var(--bg-tertiary);
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            border: 1px solid var(--border);
        }

        .route-stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.8rem;
        }

        .route-stat {
            text-align: center;
        }

        .route-stat-value {
            font-size: 1.5rem;
            font-weight: 800;
            color: var(--primary);
            display: block;
        }

        .route-stat-label {
            font-size: 0.75rem;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .waypoint-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .waypoint-item {
            display: flex;
            align-items: center;
            gap: 0.8rem;
            padding: 0.8rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
        }

        .waypoint-number {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: var(--purple);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 0.9rem;
            flex-shrink: 0;
        }

        .waypoint-info {
            flex: 1;
            font-size: 0.85rem;
            color: var(--text-secondary);
        }

            .waypoint-info strong {
                color: var(--text-primary);
                display: block;
                margin-bottom: 0.2rem;
            }

        .waypoint-remove {
            background: var(--danger);
            color: white;
            border: none;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

            .waypoint-remove:hover {
                transform: scale(1.1);
            }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo-section">
                <div class="logo-container">
                    <div class="logo">
                        <i class="fas fa-route"></i>
                    </div>
                    <div class="logo">
                        <i class="fas fa-landmark"></i>
                    </div>
                </div>
                <div class="header-info">
                    <h1>Sistema de Servicios Primarios</h1>
                    <p>Trazado de Rutas - Monclova, Coahuila</p>
                </div>
            </div>
            <div class="header-actions">
                <button class="btn btn-success" onclick="exportRoutesToExcel()">
                    <i class="fas fa-file-excel"></i>
                    Exportar
                </button>
                <button class="btn btn-secondary" onclick="toggleFullscreen()">
                    <i class="fas fa-expand"></i>
                    Pantalla Completa
                </button>
            </div>
        </div>
    </header>

    <div class="nav-overlay" id="navOverlay" onclick="closeNav()"></div>

    <button class="nav-toggle" id="navToggle" onclick="toggleNav()">
        <i class="fas fa-bars"></i>
    </button>

    <div class="nav-panel" id="navPanel">
        <div class="nav-header">
            <div class="nav-logo">
                <i class="fas fa-road"></i>
            </div>
            <h3>Navegación</h3>
        </div>
        <div class="nav-item" data-section="captura">
            <i class="fas fa-edit"></i>
            <span>Captura</span>
        </div>
        <div class="nav-item" data-section="programacion">
            <i class="fas fa-calendar-alt"></i>
            <span>Programación</span>
        </div>
        <div class="nav-item active" data-section="trazado">
            <i class="fas fa-route"></i>
            <span>Trazado de Rutas</span>
        </div>
        <div class="nav-item" data-section="rastreo">
            <i class="fas fa-search-location"></i>
            <span>Rastreo</span>
        </div>
        <div class="nav-item" data-section="dashboard">
            <i class="fas fa-chart-line"></i>
            <span>Dashboard</span>
        </div>
        <div class="nav-item" data-section="reportes">
            <i class="fas fa-file-alt"></i>
            <span>Reportes</span>
        </div>
        <div class="nav-item" data-section="material">
            <i class="fas fa-boxes"></i>
            <span>Material</span>
        </div>
        <div class="nav-item" data-section="asistencia">
            <i class="fas fa-users"></i>
            <span>Asistencia</span>
        </div>

        <div class="filter-section" style="margin-top: 2rem;">
            <div class="filter-title">Mis Rutas</div>
            <div id="routesList" class="route-list">
            </div>
            <button class="btn btn-purple" style="width: 100%; margin-top: 0.5rem;" onclick="openNewRouteModal()">
                <i class="fas fa-plus"></i>
                Nueva Ruta
            </button>
        </div>

        <div class="filter-section">
            <div class="filter-title">Filtros de Puntos</div>
            <div class="filter-group">
                <div class="filter-item">
                    <input type="checkbox" id="filterBache" checked onchange="applyFilters()">
                    <label for="filterBache">Baches</label>
                </div>
                <div class="filter-item">
                    <input type="checkbox" id="filterSima" checked onchange="applyFilters()">
                    <label for="filterSima">SIMAS</label>
                </div>
                <div class="filter-item">
                    <input type="checkbox" id="filterBordo" checked onchange="applyFilters()">
                    <label for="filterBordo">Bordos</label>
                </div>
            </div>
        </div>

        <div class="filter-section">
            <div class="filter-title">Urgencia</div>
            <div class="filter-group">
                <div class="filter-item">
                    <input type="checkbox" id="filterUrgNormal" checked onchange="applyFilters()">
                    <label for="filterUrgNormal">Normal</label>
                </div>
                <div class="filter-item">
                    <input type="checkbox" id="filterUrgHigh" checked onchange="applyFilters()">
                    <label for="filterUrgHigh">Alta</label>
                </div>
                <div class="filter-item">
                    <input type="checkbox" id="filterUrgUrgent" checked onchange="applyFilters()">
                    <label for="filterUrgUrgent">Urgente</label>
                </div>
            </div>
        </div>

        <div class="filter-section">
            <button class="btn btn-secondary" style="width: 100%;" onclick="clearFilters()">
                <i class="fas fa-times"></i>
                Limpiar Filtros
            </button>
        </div>
    </div>

    <div class="map-container">
        <div id="map"></div>
    </div>

    <div class="map-instruction" id="mapInstruction">
        <i class="fas fa-hand-pointer"></i> <span id="instructionText">Selecciona un modo para agregar puntos a la ruta</span>
    </div>

    <div class="fab-container">
        <button class="fab fab-route" id="routeFab" onclick="openNewRouteModal()" title="Nueva Ruta">
            <i class="fas fa-route"></i>
        </button>
        <button class="fab" onclick="openAddModal()" title="Nuevo Punto">
            <i class="fas fa-plus"></i>
        </button>
    </div>

    <div id="addModal" class="modal">
        <div class="modal-header" onclick="toggleModal('addModal')">
            <h2 class="modal-title">Nuevo Punto</h2>
            <div class="modal-actions">
                <button class="modal-btn" onclick="event.stopPropagation(); closeAddModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="modal-body" id="addModalBody">
            <form id="addForm" onsubmit="handleSubmit(event)">
                <div class="form-group">
                    <label class="form-label">Tipo de Daño</label>
                    <select class="form-select" id="tipoInput" required>
                        <option value="">Seleccionar...</option>
                        <option value="bache">Bache</option>
                        <option value="sima">SIMA</option>
                        <option value="bordo">Bordo</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Ubicación en el Mapa</label>
                    <button type="button" class="location-button" id="selectLocationBtn" onclick="toggleLocationSelection()">
                        <i class="fas fa-map-marker-alt"></i>
                        <span id="locationBtnText">Seleccionar en el Mapa</span>
                    </button>
                    <div class="location-display" id="locationDisplay" style="display: none;">
                        <span id="locationText"></span>
                    </div>
                    <input type="hidden" id="latInput">
                    <input type="hidden" id="lngInput">
                </div>

                <div class="form-group">
                    <label class="form-label">Solicitante</label>
                    <input type="text" class="form-input" id="solicitanteInput" required placeholder="Nombre del solicitante">
                </div>

                <div class="form-group">
                    <label class="form-label">Urgencia</label>
                    <select class="form-select" id="urgenciaInput" required>
                        <option value="normal">Normal</option>
                        <option value="high">Alta</option>
                        <option value="urgent">Urgente</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Prioridad</label>
                    <select class="form-select" id="prioridadInput" required>
                        <option value="low">Baja</option>
                        <option value="normal">Normal</option>
                        <option value="high">Alta</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Tiempo Asignado (días)</label>
                    <input type="number" class="form-input" id="tiempoInput" required placeholder="Ej: 3" min="1">
                </div>

                <div class="form-group">
                    <label class="form-label">Dirección</label>
                    <input type="text" class="form-input" id="direccionInput" required placeholder="Dirección completa">
                </div>

                <div class="form-group">
                    <label class="form-label">Descripción</label>
                    <textarea class="form-textarea" id="descripcionInput" rows="3" placeholder="Detalles adicionales..."></textarea>
                </div>

                <button type="submit" class="btn btn-primary" style="width: 100%; margin-top: 1rem;">
                    <i class="fas fa-save"></i>
                    Guardar Punto
                </button>
            </form>
        </div>
    </div>

    <div id="routeModal" class="modal">
        <div class="modal-header" onclick="toggleModal('routeModal')">
            <h2 class="modal-title">Nueva Ruta</h2>
            <div class="modal-actions">
                <button class="modal-btn" onclick="event.stopPropagation(); toggleModal('routeModal')">
                    <i class="fas fa-window-minimize" id="routeModalIcon"></i>
                </button>
                <button class="modal-btn" onclick="event.stopPropagation(); closeRouteModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="modal-body" id="routeModalBody">
            <form id="routeForm" onsubmit="handleRouteSubmit(event)">
                <div class="form-group">
                    <label class="form-label">Nombre de la Ruta</label>
                    <input type="text" class="form-input" id="routeNameInput" required placeholder="Ej: Ruta Centro">
                </div>

                <div class="form-group">
                    <label class="form-label">Descripción</label>
                    <textarea class="form-textarea" id="routeDescInput" rows="2" placeholder="Descripción de la ruta..."></textarea>
                </div>

                <div class="form-group">
                    <label class="form-label">Puntos en la Ruta</label>
                    <div style="display: flex; gap: 0.5rem; margin-bottom: 1rem;">
                        <button type="button" class="btn btn-info" id="selectExistingBtn" style="flex: 1; font-size: 0.85rem;" onclick="toggleSelectExisting()">
                            <i class="fas fa-hand-pointer"></i>
                            Seleccionar Existentes
                        </button>
                        <button type="button" class="btn btn-success" id="createNewBtn" style="flex: 1; font-size: 0.85rem;" onclick="toggleCreateNew()">
                            <i class="fas fa-map-pin"></i>
                            Crear Nuevos
                        </button>
                    </div>
                    <div id="waypointsList" class="waypoint-list">
                        <div style="text-align: center; color: var(--text-secondary); padding: 1rem; font-size: 0.85rem;">
                            Usa los botones de arriba para agregar puntos a la ruta
                        </div>
                    </div>
                </div>

                <div class="route-stats" id="routeStatsDisplay" style="display: none;">
                    <div class="route-stats-grid">
                        <div class="route-stat">
                            <span class="route-stat-value" id="totalPointsDisplay">0</span>
                            <span class="route-stat-label">Puntos</span>
                        </div>
                        <div class="route-stat">
                            <span class="route-stat-value" id="estimatedTimeDisplay">0</span>
                            <span class="route-stat-label">Días Est.</span>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary" style="width: 100%; margin-top: 1rem;">
                    <i class="fas fa-save"></i>
                    Guardar Ruta
                </button>
            </form>
        </div>
    </div>

    <div id="quickAddModal" class="modal">
        <div class="modal-header" onclick="toggleModal('quickAddModal')">
            <h2 class="modal-title">Agregar Punto a Ruta</h2>
            <div class="modal-actions">
                <button class="modal-btn" onclick="event.stopPropagation(); toggleModal('quickAddModal')">
                    <i class="fas fa-window-minimize" id="quickAddModalIcon"></i>
                </button>
                <button class="modal-btn" onclick="event.stopPropagation(); closeQuickAddModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="modal-body" id="quickAddModalBody">
            <form id="quickAddForm" onsubmit="handleQuickAddSubmit(event)">
                <div class="location-display" style="display: block; margin-bottom: 1rem;">
                    <i class="fas fa-map-marker-alt"></i>
                    <span id="quickLocationText"></span>
                </div>

                <div class="form-group">
                    <label class="form-label">Tipo de Daño</label>
                    <select class="form-select" id="quickTipoInput" required>
                        <option value="">Seleccionar...</option>
                        <option value="bache">Bache</option>
                        <option value="sima">SIMA</option>
                        <option value="bordo">Bordo</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Dirección</label>
                    <input type="text" class="form-input" id="quickDireccionInput" required placeholder="Dirección del punto">
                </div>

                <div class="form-group">
                    <label class="form-label">Solicitante</label>
                    <input type="text" class="form-input" id="quickSolicitanteInput" required placeholder="Nombre del solicitante">
                </div>

                <div class="form-group">
                    <label class="form-label">Urgencia</label>
                    <select class="form-select" id="quickUrgenciaInput" required>
                        <option value="normal">Normal</option>
                        <option value="high">Alta</option>
                        <option value="urgent">Urgente</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Prioridad</label>
                    <select class="form-select" id="quickPrioridadInput" required>
                        <option value="low">Baja</option>
                        <option value="normal" selected>Normal</option>
                        <option value="high">Alta</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Tiempo Asignado (días)</label>
                    <input type="number" class="form-input" id="quickTiempoInput" required placeholder="Ej: 3" min="1" value="3">
                </div>

                <div class="form-group">
                    <label class="form-label">Descripción (Opcional)</label>
                    <textarea class="form-textarea" id="quickDescripcionInput" rows="2" placeholder="Detalles adicionales..."></textarea>
                </div>

                <input type="hidden" id="quickLatInput">
                <input type="hidden" id="quickLngInput">

                <div style="display: flex; gap: 0.5rem;">
                    <button type="submit" class="btn btn-purple" style="flex: 1;">
                        <i class="fas fa-plus"></i>
                        Agregar a Ruta
                    </button>
                    <button type="button" class="btn btn-secondary" style="flex: 1;" onclick="closeQuickAddModal()">
                        <i class="fas fa-times"></i>
                        Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div id="notification" class="notification">
        <i class="fas fa-check-circle"></i>
        <span id="notificationText"></span>
    </div>

    <script>
        let map;
        let markers = [];
        let records = [];
        let routes = [];
        let tempMarker = null;
        let isSelectingLocation = false;
        let isSelectingExistingPoints = false;
        let isCreatingNewPoints = false;
        let currentRoute = {
            waypoints: [],
            polyline: null
        };
        let editingRecordId = null;
        let selectedRouteId = null;

        const customIcons = {
            bache: L.divIcon({
                html: '<div style="background: #DC2626; width: 40px; height: 40px; border-radius: 50% 50% 50% 0; transform: rotate(-45deg); border: 3px solid white; box-shadow: 0 4px 12px rgba(0,0,0,0.4); display: flex; align-items: center; justify-content: center;"><i class="fas fa-road" style="color: white; transform: rotate(45deg); font-size: 18px;"></i></div>',
                className: '',
                iconSize: [40, 40],
                iconAnchor: [20, 40]
            }),
            sima: L.divIcon({
                html: '<div style="background: #10B981; width: 40px; height: 40px; border-radius: 50% 50% 50% 0; transform: rotate(-45deg); border: 3px solid white; box-shadow: 0 4px 12px rgba(0,0,0,0.4); display: flex; align-items: center; justify-content: center;"><i class="fas fa-tint" style="color: white; transform: rotate(45deg); font-size: 18px;"></i></div>',
                className: '',
                iconSize: [40, 40],
                iconAnchor: [20, 40]
            }),
            bordo: L.divIcon({
                html: '<div style="background: #F59E0B; width: 40px; height: 40px; border-radius: 50% 50% 50% 0; transform: rotate(-45deg); border: 3px solid white; box-shadow: 0 4px 12px rgba(0,0,0,0.4); display: flex; align-items: center; justify-content: center;"><i class="fas fa-exclamation-triangle" style="color: white; transform: rotate(45deg); font-size: 18px;"></i></div>',
                className: '',
                iconSize: [40, 40],
                iconAnchor: [20, 40]
            }),
            urgent: L.divIcon({
                html: '<div style="background: #DC2626; width: 46px; height: 46px; border-radius: 50% 50% 50% 0; transform: rotate(-45deg); border: 3px solid gold; box-shadow: 0 6px 16px rgba(220,38,38,0.6); display: flex; align-items: center; justify-content: center;"><i class="fas fa-star" style="color: gold; transform: rotate(45deg); font-size: 20px;"></i></div>',
                className: '',
                iconSize: [46, 46],
                iconAnchor: [23, 46]
            }),
            temp: L.divIcon({
                html: '<div style="background: #3B82F6; width: 44px; height: 44px; border-radius: 50% 50% 50% 0; transform: rotate(-45deg); border: 3px solid white; box-shadow: 0 6px 16px rgba(59,130,246,0.6); display: flex; align-items: center; justify-content: center;"><i class="fas fa-map-pin" style="color: white; transform: rotate(45deg); font-size: 20px;"></i></div>',
                className: '',
                iconSize: [44, 44],
                iconAnchor: [22, 44]
            })
        };

        document.addEventListener('DOMContentLoaded', function() {
            initMap();
            loadRecords();
            loadRoutes();
            renderMarkers();
            renderRoutesList();
            setupNavigation();
            makeHeaderResponsive();
            window.addEventListener('resize', makeHeaderResponsive);
        });

        function makeHeaderResponsive() {
            const width = window.innerWidth;
            const header = document.querySelector('.header');
            const headerContent = document.querySelector('.header-content');
            const logoSection = document.querySelector('.logo-section');
            const logos = document.querySelectorAll('.logo');
            const logoIcons = document.querySelectorAll('.logo i');
            const buttons = document.querySelectorAll('.header-actions .btn');
            const title = document.querySelector('.header-info h1');
            const subtitle = document.querySelector('.header-info p');
            const mapContainer = document.querySelector('.map-container');
            const mapInstruction = document.querySelector('.map-instruction');
            const headerActions = document.querySelector('.header-actions');

            if (width < 600) {
                header.style.padding = '1rem 1rem';
                headerContent.style.flexDirection = 'column';
                headerContent.style.alignItems = 'flex-start';
                headerContent.style.gap = '1rem';
                logoSection.style.gap = '1rem';
                logoSection.style.minWidth = 'auto';
                logos.forEach(logo => {
                    logo.style.width = '55px';
                    logo.style.height = '55px';
                });
                logoIcons.forEach(icon => {
                    icon.style.fontSize = '1.8rem';
                });
                buttons.forEach(btn => {
                    btn.style.padding = '0.5rem 0.8rem';
                    btn.style.fontSize = '0.75rem';
                });
                if (title) title.style.fontSize = '1.1rem';
                if (subtitle) subtitle.style.fontSize = '0.8rem';
                if (headerActions) {
                    headerActions.style.width = '100%';
                    headerActions.style.justifyContent = 'space-between';
                }
                mapContainer.style.top = '155px';
                mapInstruction.style.top = '175px';
            } else if (width < 900) {
                header.style.padding = '1.3rem 1.5rem';
                headerContent.style.flexDirection = 'row';
                headerContent.style.alignItems = 'center';
                headerContent.style.gap = '1.2rem';
                logoSection.style.gap = '1.2rem';
                logoSection.style.minWidth = '250px';
                logos.forEach(logo => {
                    logo.style.width = '65px';
                    logo.style.height = '65px';
                });
                logoIcons.forEach(icon => {
                    icon.style.fontSize = '2rem';
                });
                buttons.forEach(btn => {
                    btn.style.padding = '0.6rem 1rem';
                    btn.style.fontSize = '0.85rem';
                });
                if (title) title.style.fontSize = '1.3rem';
                if (subtitle) subtitle.style.fontSize = '0.9rem';
                if (headerActions) {
                    headerActions.style.width = 'auto';
                    headerActions.style.justifyContent = 'flex-end';
                }
                mapContainer.style.top = '130px';
                mapInstruction.style.top = '150px';
            } else if (width < 1200) {
                header.style.padding = '1.5rem 1.8rem';
                headerContent.style.flexDirection = 'row';
                headerContent.style.alignItems = 'center';
                headerContent.style.gap = '1.5rem';
                logoSection.style.gap = '1.5rem';
                logoSection.style.minWidth = '280px';
                logos.forEach(logo => {
                    logo.style.width = '75px';
                    logo.style.height = '75px';
                });
                logoIcons.forEach(icon => {
                    icon.style.fontSize = '2.2rem';
                });
                buttons.forEach(btn => {
                    btn.style.padding = '0.6rem 1rem';
                    btn.style.fontSize = '0.85rem';
                });
                if (title) title.style.fontSize = '1.45rem';
                if (subtitle) subtitle.style.fontSize = '0.95rem';
                if (headerActions) {
                    headerActions.style.width = 'auto';
                    headerActions.style.justifyContent = 'flex-end';
                }
                mapContainer.style.top = '145px';
                mapInstruction.style.top = '165px';
            } else {
                header.style.padding = '1.8rem 2rem';
                headerContent.style.flexDirection = 'row';
                headerContent.style.alignItems = 'center';
                headerContent.style.gap = '2rem';
                logoSection.style.gap = '1.8rem';
                logoSection.style.minWidth = '300px';
                logos.forEach(logo => {
                    logo.style.width = '90px';
                    logo.style.height = '90px';
                });
                logoIcons.forEach(icon => {
                    icon.style.fontSize = '2.5rem';
                });
                buttons.forEach(btn => {
                    btn.style.padding = '0.6rem 1rem';
                    btn.style.fontSize = '0.85rem';
                });
                if (title) title.style.fontSize = '1.65rem';
                if (subtitle) subtitle.style.fontSize = '1rem';
                if (headerActions) {
                    headerActions.style.width = 'auto';
                    headerActions.style.justifyContent = 'flex-end';
                }
                mapContainer.style.top = '165px';
                mapInstruction.style.top = '185px';
            }
        }

        function initMap() {
            map = L.map('map').setView([26.9070, -101.4205], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors',
                maxZoom: 19
            }).addTo(map);

            map.on('click', onMapClick);
        }

        function setupNavigation() {
            const navItems = document.querySelectorAll('.nav-item');
            navItems.forEach(function(item) {
                item.addEventListener('click', function() {
                    const section = this.getAttribute('data-section');
                    handleNavigation(section);
                });
            });
        }

        function handleNavigation(section) {
            const routes = {
                'captura': '/Home/CapturaBacheo',
                'programacion': '/Home/ProgramacionBacheo',
                'rastreo': '/Home/RastreoBacheo',
                'dashboard': '/Home/DashboardBacheo',
                'reportes': '/Home/ReportesBacheo',
                'material': '/Home/MaterialUtilizadoBacheo',
                'asistencia': '/Home/AsistenciaPersonalBacheo',
                'trazado': '#'
            };

            const route = routes[section];
            if (route && route !== '#') {
                showNotification('Navegando a ' + section, 'info');
                closeNav();
                setTimeout(function() {
                    window.location.href = route;
                }, 800);
            } else if (section === 'trazado') {
                closeNav();
                showNotification('Ya estás en Trazado de Rutas', 'info');
            }
        }

        function loadRecords() {
            const saved = localStorage.getItem('programacionBacheoRecords');
            if (saved) {
                records = JSON.parse(saved);
            } else {
                records = [
                    {
                        id: 1,
                        tipo: 'bache',
                        lat: 26.9070,
                        lng: -101.4205,
                        solicitante: 'Juan Pérez',
                        urgencia: 'urgent',
                        prioridad: 'high',
                        tiempoAsignado: 3,
                        fechaCreacion: new Date().toISOString(),
                        direccion: 'Calle Hidalgo #123',
                        descripcion: 'Bache grande en la vía principal'
                    },
                    {
                        id: 2,
                        tipo: 'sima',
                        lat: 26.9100,
                        lng: -101.4250,
                        solicitante: 'María García',
                        urgencia: 'high',
                        prioridad: 'normal',
                        tiempoAsignado: 5,
                        fechaCreacion: new Date().toISOString(),
                        direccion: 'Avenida Morelos #456',
                        descripcion: 'Fuga de agua reportada'
                    },
                    {
                        id: 3,
                        tipo: 'bordo',
                        lat: 26.9050,
                        lng: -101.4180,
                        solicitante: 'Carlos López',
                        urgencia: 'normal',
                        prioridad: 'low',
                        tiempoAsignado: 7,
                        fechaCreacion: new Date().toISOString(),
                        direccion: 'Calle Zaragoza #789',
                        descripcion: 'Reparación de bordo necesaria'
                    },
                    {
                        id: 4,
                        tipo: 'bache',
                        lat: 26.9120,
                        lng: -101.4280,
                        solicitante: 'Ana Martínez',
                        urgencia: 'normal',
                        prioridad: 'normal',
                        tiempoAsignado: 4,
                        fechaCreacion: new Date().toISOString(),
                        direccion: 'Boulevard Fundadores #234',
                        descripcion: 'Bache mediano'
                    }
                ];
                saveRecords();
            }
        }

        function loadRoutes() {
            const saved = localStorage.getItem('trazadoRutas');
            if (saved) {
                routes = JSON.parse(saved);
            }
        }

        function saveRecords() {
            localStorage.setItem('programacionBacheoRecords', JSON.stringify(records));
        }

        function saveRoutes() {
            localStorage.setItem('trazadoRutas', JSON.stringify(routes));
        }

        function renderMarkers() {
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];

            const filtered = getFilteredRecords();

            filtered.forEach(record => {
                let icon = customIcons[record.tipo];

                if (record.urgencia === 'urgent') {
                    icon = customIcons.urgent;
                }

                const marker = L.marker([record.lat, record.lng], { icon: icon }).addTo(map);
                marker.recordId = record.id;

                marker.on('click', function(e) {
                    if (isSelectingExistingPoints) {
                        L.DomEvent.stopPropagation(e);
                        const clickedRecord = records.find(r => r.id === marker.recordId);
                        if (clickedRecord) {
                            if (currentRoute.waypoints.find(w => w.id === clickedRecord.id)) {
                                showNotification('Este punto ya está en la ruta', 'error');
                            } else {
                                addWaypointToRoute(clickedRecord);
                                document.getElementById('routeModal').classList.remove('minimized');
                                document.getElementById('routeModalIcon').className = 'fas fa-window-minimize';
                            }
                        }
                        return;
                    }
                });

                const status = getStatus(record);
                const statusColor = status === 'ontime' ? '#10B981' : status === 'warning' ? '#F59E0B' : '#EF4444';
                const statusText = status === 'ontime' ? 'A Tiempo' : status === 'warning' ? 'Por Vencer' : 'Atrasado';

                const popupContent = `
                    <div style="min-width: 250px; background: #1F1F1F; padding: 1rem; border-radius: 8px;">
                        <div style="font-size: 1.1rem; font-weight: 700; color: #DC2626; margin-bottom: 0.5rem;">${getTipoLabel(record.tipo)}</div>
                        <div style="font-size: 0.85rem; color: #B3B3B3; margin: 0.3rem 0;">
                            <i class="fas fa-user" style="width: 20px;"></i> <strong>Solicitante:</strong> ${record.solicitante}
                        </div>
                        <div style="font-size: 0.85rem; color: #B3B3B3; margin: 0.3rem 0;">
                            <i class="fas fa-map-marker-alt" style="width: 20px;"></i> ${record.direccion}
                        </div>
                        <div style="font-size: 0.85rem; color: #B3B3B3; margin: 0.3rem 0;">
                            <i class="fas fa-clock" style="width: 20px;"></i> <strong>Tiempo:</strong> ${record.tiempoAsignado} días
                        </div>
                        <div style="margin: 0.5rem 0; display: flex; gap: 0.5rem;">
                            <span style="padding: 0.3rem 0.6rem; border-radius: 6px; font-size: 0.75rem; font-weight: 700; background: rgba(220,38,38,0.2); color: #DC2626;">${getUrgenciaLabel(record.urgencia)}</span>
                            <span style="padding: 0.3rem 0.6rem; border-radius: 6px; font-size: 0.75rem; font-weight: 700; background: rgba(59,130,246,0.2); color: #3B82F6;">${getPrioridadLabel(record.prioridad)}</span>
                        </div>
                        <div style="font-size: 0.85rem; margin: 0.3rem 0; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="width: 12px; height: 12px; border-radius: 50%; background: ${statusColor}; display: inline-block;"></span>
                            <span style="color: ${statusColor}; font-weight: 600;">${statusText}</span>
                        </div>
                        ${record.descripcion ? `<div style="margin-top: 0.5rem; font-style: italic; color: #B3B3B3; font-size: 0.85rem;">${record.descripcion}</div>` : ''}
                        <div style="display: flex; gap: 0.5rem; margin-top: 0.8rem;">
                            <button onclick="openInMaps(${record.lat}, ${record.lng})" style="flex: 1; padding: 0.5rem; border: none; border-radius: 6px; font-size: 0.8rem; font-weight: 600; cursor: pointer; background: #DC2626; color: white;">
                                <i class="fas fa-map-marked-alt"></i> Maps
                            </button>
                            <button onclick="editRecord(${record.id})" style="flex: 1; padding: 0.5rem; border: none; border-radius: 6px; font-size: 0.8rem; font-weight: 600; cursor: pointer; background: #3B82F6; color: white;">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                            <button onclick="deleteRecord(${record.id})" style="flex: 1; padding: 0.5rem; border: 1px solid #333; border-radius: 6px; font-size: 0.8rem; font-weight: 600; cursor: pointer; background: #2A2A2A; color: #B3B3B3;">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;

                marker.bindPopup(popupContent);
                markers.push(marker);
            });
        }

        function renderRoutesList() {
            const container = document.getElementById('routesList');

            if (routes.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: var(--text-secondary); padding: 1rem; font-size: 0.85rem;">No hay rutas creadas</div>';
                return;
            }

            container.innerHTML = routes.map(route => `
                <div class="route-item ${selectedRouteId === route.id ? 'selected' : ''}" onclick="selectRoute(${route.id})">
                    <div class="route-info">
                        <strong>${route.name}</strong>
                        ${route.waypoints.length} puntos - ${calculateRouteTime(route)} días
                    </div>
                    <div class="route-actions">
                        <button class="route-btn" style="background: #3B82F6; color: white;" onclick="event.stopPropagation(); viewRouteOnMap(${route.id})">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="route-btn" style="background: #10B981; color: white;" onclick="event.stopPropagation(); exportRouteToMaps(${route.id})">
                            <i class="fas fa-map"></i>
                        </button>
                        <button class="route-btn" style="background: #EF4444; color: white;" onclick="event.stopPropagation(); deleteRoute(${route.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function getFilteredRecords() {
            const bacheChecked = document.getElementById('filterBache').checked;
            const simaChecked = document.getElementById('filterSima').checked;
            const bordoChecked = document.getElementById('filterBordo').checked;
            const urgNormalChecked = document.getElementById('filterUrgNormal').checked;
            const urgHighChecked = document.getElementById('filterUrgHigh').checked;
            const urgUrgentChecked = document.getElementById('filterUrgUrgent').checked;

            return records.filter(record => {
                const tipoMatch = (record.tipo === 'bache' && bacheChecked) ||
                                 (record.tipo === 'sima' && simaChecked) ||
                                 (record.tipo === 'bordo' && bordoChecked);

                const urgMatch = (record.urgencia === 'normal' && urgNormalChecked) ||
                                (record.urgencia === 'high' && urgHighChecked) ||
                                (record.urgencia === 'urgent' && urgUrgentChecked);

                return tipoMatch && urgMatch;
            });
        }

        function getStatus(record) {
            const now = new Date();
            const created = new Date(record.fechaCreacion);
            const daysElapsed = (now - created) / (1000 * 60 * 60 * 24);
            const percentageElapsed = (daysElapsed / record.tiempoAsignado) * 100;

            if (percentageElapsed < 70) return 'ontime';
            if (percentageElapsed < 100) return 'warning';
            return 'delayed';
        }

        function getTipoLabel(tipo) {
            const labels = {
                'bache': 'Bache',
                'sima': 'SIMA',
                'bordo': 'Bordo'
            };
            return labels[tipo] || tipo;
        }

        function getUrgenciaLabel(urgencia) {
            const labels = {
                'normal': 'Normal',
                'high': 'Alta',
                'urgent': 'Urgente'
            };
            return labels[urgencia] || urgencia;
        }

        function getPrioridadLabel(prioridad) {
            const labels = {
                'low': 'Baja',
                'normal': 'Normal',
                'high': 'Alta'
            };
            return labels[prioridad] || prioridad;
        }

        function applyFilters() {
            renderMarkers();
            if (selectedRouteId) {
                viewRouteOnMap(selectedRouteId);
            }
        }

        function openQuickAddPoint(lat, lng) {
            if (tempMarker) {
                map.removeLayer(tempMarker);
            }

            tempMarker = L.marker([lat, lng], { icon: customIcons.temp }).addTo(map);

            document.getElementById('quickLatInput').value = lat.toFixed(6);
            document.getElementById('quickLngInput').value = lng.toFixed(6);
            document.getElementById('quickLocationText').textContent = `Lat: ${lat.toFixed(6)}, Lng: ${lng.toFixed(6)}`;

            document.getElementById('quickAddModal').classList.add('active');
            document.getElementById('quickAddModal').classList.remove('minimized');

            isCreatingNewPoints = false;
            document.getElementById('mapInstruction').classList.remove('show');
            map.getContainer().style.cursor = '';

            const createBtn = document.getElementById('createNewBtn');
            if (createBtn) createBtn.style.background = 'linear-gradient(135deg, var(--success), #34D399)';

            showNotification('Completa los datos del nuevo punto', 'info');
        }

        function closeQuickAddModal() {
            document.getElementById('quickAddModal').classList.remove('active');
            document.getElementById('quickAddForm').reset();

            if (tempMarker) {
                map.removeLayer(tempMarker);
                tempMarker = null;
            }

            if (document.getElementById('routeModal').classList.contains('active')) {
                document.getElementById('routeModal').classList.remove('minimized');
                document.getElementById('routeModalIcon').className = 'fas fa-window-minimize';
            }
        }

        function handleQuickAddSubmit(e) {
            e.preventDefault();

            const lat = parseFloat(document.getElementById('quickLatInput').value);
            const lng = parseFloat(document.getElementById('quickLngInput').value);

            const newRecord = {
                id: Date.now(),
                tipo: document.getElementById('quickTipoInput').value,
                lat: lat,
                lng: lng,
                solicitante: document.getElementById('quickSolicitanteInput').value,
                urgencia: document.getElementById('quickUrgenciaInput').value,
                prioridad: document.getElementById('quickPrioridadInput').value,
                tiempoAsignado: parseInt(document.getElementById('quickTiempoInput').value),
                direccion: document.getElementById('quickDireccionInput').value,
                descripcion: document.getElementById('quickDescripcionInput').value,
                fechaCreacion: new Date().toISOString()
            };

            records.push(newRecord);
            saveRecords();

            addWaypointToRoute(newRecord);

            renderMarkers();

            closeQuickAddModal();

            if (document.getElementById('routeModal').classList.contains('active')) {
                document.getElementById('routeModal').classList.remove('minimized');
                document.getElementById('routeModalIcon').className = 'fas fa-window-minimize';
            }

            showNotification('Punto creado y agregado a la ruta', 'success');
        }

        function clearFilters() {
            document.getElementById('filterBache').checked = true;
            document.getElementById('filterSima').checked = true;
            document.getElementById('filterBordo').checked = true;
            document.getElementById('filterUrgNormal').checked = true;
            document.getElementById('filterUrgHigh').checked = true;
            document.getElementById('filterUrgUrgent').checked = true;
            renderMarkers();
            showNotification('Filtros restablecidos', 'info');
        }

        function toggleNav() {
            const navPanel = document.getElementById('navPanel');
            const navOverlay = document.getElementById('navOverlay');
            navPanel.classList.toggle('open');
            navOverlay.classList.toggle('show');
        }

        function closeNav() {
            const navPanel = document.getElementById('navPanel');
            const navOverlay = document.getElementById('navOverlay');
            navPanel.classList.remove('open');
            navOverlay.classList.remove('show');
        }

        function toggleRouteMode() {
            // Esta función ya no es necesaria, pero la mantenemos por compatibilidad
            openNewRouteModal();
        }

        function toggleSelectExisting() {
            const btn = document.getElementById('selectExistingBtn');
            const createBtn = document.getElementById('createNewBtn');
            const instruction = document.getElementById('instructionText');

            if (isSelectingExistingPoints) {
                isSelectingExistingPoints = false;
                btn.style.background = 'linear-gradient(135deg, var(--info), #60A5FA)';
                document.getElementById('mapInstruction').classList.remove('show');
                map.getContainer().style.cursor = '';
                showNotification('Modo selección desactivado', 'info');
            } else {
                isSelectingExistingPoints = true;
                isCreatingNewPoints = false;

                btn.style.background = 'linear-gradient(135deg, var(--success), #34D399)';
                createBtn.style.background = 'linear-gradient(135deg, var(--success), #34D399)';

                instruction.innerHTML = '<i class="fas fa-hand-pointer"></i> <strong>Selecciona puntos existentes:</strong> Haz clic sobre los marcadores en el mapa';
                document.getElementById('mapInstruction').classList.add('show');
                map.getContainer().style.cursor = 'pointer';

                document.getElementById('routeModal').classList.add('minimized');
                document.getElementById('routeModalIcon').className = 'fas fa-window-maximize';

                showNotification('Haz clic sobre los puntos existentes en el mapa', 'info');
            }
        }

        function toggleCreateNew() {
            const btn = document.getElementById('createNewBtn');
            const selectBtn = document.getElementById('selectExistingBtn');
            const instruction = document.getElementById('instructionText');

            if (isCreatingNewPoints) {
                isCreatingNewPoints = false;
                btn.style.background = 'linear-gradient(135deg, var(--success), #34D399)';
                document.getElementById('mapInstruction').classList.remove('show');
                map.getContainer().style.cursor = '';
                showNotification('Modo creación desactivado', 'info');
            } else {
                isCreatingNewPoints = true;
                isSelectingExistingPoints = false;

                btn.style.background = 'linear-gradient(135deg, #F59E0B, #FBBF24)';
                selectBtn.style.background = 'linear-gradient(135deg, var(--info), #60A5FA)';

                instruction.innerHTML = '<i class="fas fa-map-pin"></i> <strong>Crea nuevos puntos:</strong> Haz clic en cualquier lugar del mapa';
                document.getElementById('mapInstruction').classList.add('show');
                map.getContainer().style.cursor = 'crosshair';

                document.getElementById('routeModal').classList.add('minimized');
                document.getElementById('routeModalIcon').className = 'fas fa-window-maximize';

                showNotification('Haz clic en el mapa para crear nuevos puntos', 'info');
            }
        }

        function onMapClick(e) {
            if (!document.getElementById('routeModal').classList.contains('active')) {
                return;
            }

            if (isCreatingNewPoints) {
                openQuickAddPoint(e.latlng.lat, e.latlng.lng);
            }
        }

        function addWaypointToRoute(record) {
            if (currentRoute.waypoints.find(w => w.id === record.id)) {
                showNotification('Este punto ya está en la ruta', 'error');
                return;
            }

            currentRoute.waypoints.push(record);
            updateRoutePolyline();
            renderWaypointsList();
            updateRouteStats();

            const waypointNumber = currentRoute.waypoints.length;
            showNotification(`Punto #${waypointNumber} agregado a la ruta`, 'success');
        }

        function removeWaypointFromRoute(recordId) {
            currentRoute.waypoints = currentRoute.waypoints.filter(w => w.id !== recordId);
            updateRoutePolyline();
            renderWaypointsList();
            updateRouteStats();
        }

        function updateRoutePolyline() {
            if (currentRoute.polyline) {
                map.removeLayer(currentRoute.polyline);
            }

            if (currentRoute.waypoints.length > 1) {
                const latlngs = currentRoute.waypoints.map(w => [w.lat, w.lng]);
                currentRoute.polyline = L.polyline(latlngs, {
                    color: '#8B5CF6',
                    weight: 4,
                    opacity: 0.8,
                    dashArray: '10, 10'
                }).addTo(map);
            }
        }

        function renderWaypointsList() {
            const container = document.getElementById('waypointsList');

            if (currentRoute.waypoints.length === 0) {
                container.innerHTML = '<div style="text-align: center; color: var(--text-secondary); padding: 1rem; font-size: 0.85rem;">Selecciona puntos en el mapa para agregar a la ruta</div>';
                return;
            }

            container.innerHTML = currentRoute.waypoints.map((waypoint, index) => `
                <div class="waypoint-item">
                    <div class="waypoint-number">${index + 1}</div>
                    <div class="waypoint-info">
                        <strong>${getTipoLabel(waypoint.tipo)}</strong>
                        ${waypoint.direccion}
                    </div>
                    <button class="waypoint-remove" onclick="removeWaypointFromRoute(${waypoint.id})">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `).join('');
        }

        function updateRouteStats() {
            const statsDisplay = document.getElementById('routeStatsDisplay');
            const totalPoints = document.getElementById('totalPointsDisplay');
            const estimatedTime = document.getElementById('estimatedTimeDisplay');

            if (currentRoute.waypoints.length > 0) {
                statsDisplay.style.display = 'block';
                totalPoints.textContent = currentRoute.waypoints.length;
                const totalDays = currentRoute.waypoints.reduce((sum, w) => sum + w.tiempoAsignado, 0);
                estimatedTime.textContent = totalDays;
            } else {
                statsDisplay.style.display = 'none';
            }
        }

        function calculateRouteTime(route) {
            return route.waypoints.reduce((sum, w) => sum + w.tiempoAsignado, 0);
        }

        function clearCurrentRoute() {
            if (currentRoute.polyline) {
                map.removeLayer(currentRoute.polyline);
            }
            currentRoute = {
                waypoints: [],
                polyline: null
            };
        }

        function openNewRouteModal() {
            clearCurrentRoute();
            isSelectingExistingPoints = false;
            isCreatingNewPoints = false;
            document.getElementById('routeForm').reset();
            renderWaypointsList();
            updateRouteStats();

            const selectBtn = document.getElementById('selectExistingBtn');
            const createBtn = document.getElementById('createNewBtn');
            selectBtn.style.background = 'linear-gradient(135deg, var(--info), #60A5FA)';
            createBtn.style.background = 'linear-gradient(135deg, var(--success), #34D399)';

            openRouteModal();
        }

        function openRouteModal() {
            document.getElementById('routeModal').classList.add('active');
            document.getElementById('routeModal').classList.remove('minimized');
        }

        function closeRouteModal() {
            document.getElementById('routeModal').classList.remove('active');
            isSelectingExistingPoints = false;
            isCreatingNewPoints = false;
            document.getElementById('mapInstruction').classList.remove('show');
            map.getContainer().style.cursor = '';

            const selectBtn = document.getElementById('selectExistingBtn');
            const createBtn = document.getElementById('createNewBtn');
            if (selectBtn) selectBtn.style.background = 'linear-gradient(135deg, var(--info), #60A5FA)';
            if (createBtn) createBtn.style.background = 'linear-gradient(135deg, var(--success), #34D399)';
        }

        function handleRouteSubmit(e) {
            e.preventDefault();

            if (currentRoute.waypoints.length < 2) {
                showNotification('La ruta debe tener al menos 2 puntos', 'error');
                return;
            }

            const newRoute = {
                id: Date.now(),
                name: document.getElementById('routeNameInput').value,
                description: document.getElementById('routeDescInput').value,
                waypoints: currentRoute.waypoints.map(w => w.id),
                createdAt: new Date().toISOString()
            };

            routes.push(newRoute);
            saveRoutes();
            renderRoutesList();
            closeRouteModal();
            clearCurrentRoute();

            isSelectingExistingPoints = false;
            isCreatingNewPoints = false;
            document.getElementById('mapInstruction').classList.remove('show');
            map.getContainer().style.cursor = '';

            showNotification('Ruta guardada exitosamente', 'success');
        }

        function selectRoute(routeId) {
            selectedRouteId = routeId;
            renderRoutesList();
            viewRouteOnMap(routeId);
        }

        function viewRouteOnMap(routeId) {
            const route = routes.find(r => r.id === routeId);
            if (!route) return;

            clearCurrentRoute();

            const waypoints = route.waypoints.map(id => records.find(r => r.id === id)).filter(r => r);

            if (waypoints.length > 1) {
                const latlngs = waypoints.map(w => [w.lat, w.lng]);
                currentRoute.polyline = L.polyline(latlngs, {
                    color: '#8B5CF6',
                    weight: 5,
                    opacity: 0.9
                }).addTo(map);

                const bounds = L.latLngBounds(latlngs);
                map.fitBounds(bounds, { padding: [50, 50] });
            }

            showNotification('Ruta visualizada en el mapa', 'success');
        }

        function exportRouteToMaps(routeId) {
            const route = routes.find(r => r.id === routeId);
            if (!route) return;

            const waypoints = route.waypoints.map(id => records.find(r => r.id === id)).filter(r => r);

            if (waypoints.length === 0) {
                showNotification('La ruta no tiene puntos válidos', 'error');
                return;
            }

            const origin = waypoints[0];
            const destination = waypoints[waypoints.length - 1];
            const waypointsStr = waypoints.slice(1, -1).map(w => `${w.lat},${w.lng}`).join('|');

            let url = `https://www.google.com/maps/dir/?api=1&origin=${origin.lat},${origin.lng}&destination=${destination.lat},${destination.lng}`;

            if (waypointsStr) {
                url += `&waypoints=${waypointsStr}`;
            }

            url += '&travelmode=driving';

            window.open(url, '_blank');
            showNotification('Ruta exportada a Google Maps', 'success');
        }

        function deleteRoute(routeId) {
            if (!confirm('¿Está seguro de eliminar esta ruta?')) return;

            routes = routes.filter(r => r.id !== routeId);
            saveRoutes();
            renderRoutesList();

            if (selectedRouteId === routeId) {
                selectedRouteId = null;
                clearCurrentRoute();
            }

            showNotification('Ruta eliminada', 'success');
        }

        function openAddModal() {
            editingRecordId = null;

            if (tempMarker) {
                map.removeLayer(tempMarker);
                tempMarker = null;
            }

            document.getElementById('addForm').reset();
            document.getElementById('locationDisplay').style.display = 'none';
            document.getElementById('locationBtnText').textContent = 'Seleccionar en el Mapa';
            document.getElementById('latInput').value = '';
            document.getElementById('lngInput').value = '';

            disableLocationSelection();

            document.getElementById('addModal').classList.add('active');
            document.getElementById('addModal').classList.remove('minimized');
            document.querySelector('#addModal .modal-title').textContent = 'Nuevo Punto';
        }

        function closeAddModal() {
            editingRecordId = null;
            document.getElementById('addModal').classList.remove('active');
            document.getElementById('addForm').reset();
            document.getElementById('locationDisplay').style.display = 'none';
            document.getElementById('locationBtnText').textContent = 'Seleccionar en el Mapa';
            document.getElementById('latInput').value = '';
            document.getElementById('lngInput').value = '';

            if (tempMarker) {
                map.removeLayer(tempMarker);
                tempMarker = null;
            }

            disableLocationSelection();

            const btn = document.getElementById('selectLocationBtn');
            btn.classList.remove('active');
        }

        function editRecord(id) {
            const record = records.find(r => r.id === id);
            if (!record) return;

            editingRecordId = id;

            document.getElementById('tipoInput').value = record.tipo;
            document.getElementById('latInput').value = record.lat;
            document.getElementById('lngInput').value = record.lng;
            document.getElementById('solicitanteInput').value = record.solicitante;
            document.getElementById('urgenciaInput').value = record.urgencia;
            document.getElementById('prioridadInput').value = record.prioridad;
            document.getElementById('tiempoInput').value = record.tiempoAsignado;
            document.getElementById('direccionInput').value = record.direccion;
            document.getElementById('descripcionInput').value = record.descripcion || '';

            document.getElementById('locationDisplay').style.display = 'block';
            document.getElementById('locationText').textContent = `Lat: ${record.lat.toFixed(6)}, Lng: ${record.lng.toFixed(6)}`;
            document.getElementById('locationBtnText').textContent = 'Ubicación Seleccionada ✓';

            if (tempMarker) {
                map.removeLayer(tempMarker);
            }
            tempMarker = L.marker([record.lat, record.lng], { icon: customIcons.temp }).addTo(map);

            document.querySelector('#addModal .modal-title').textContent = 'Editar Punto';
            document.getElementById('addModal').classList.add('active');
            document.getElementById('addModal').classList.remove('minimized');

            map.setView([record.lat, record.lng], 16);

            showNotification('Modo edición activado', 'info');
        }

        function toggleModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.toggle('minimized');

            const iconId = modalId === 'addModal' ? 'addModalIcon' : 'routeModalIcon';
            const icon = document.getElementById(iconId);
            if (modal.classList.contains('minimized')) {
                icon.className = 'fas fa-window-maximize';
            } else {
                icon.className = 'fas fa-window-minimize';
            }
        }

        function toggleLocationSelection() {
            if (isSelectingLocation) {
                disableLocationSelection();

                const lat = document.getElementById('latInput').value;
                const btn = document.getElementById('selectLocationBtn');
                btn.classList.remove('active');

                if (lat) {
                    document.getElementById('locationBtnText').textContent = 'Ubicación Seleccionada ✓';
                } else {
                    document.getElementById('locationBtnText').textContent = 'Seleccionar en el Mapa';
                }
            } else {
                enableLocationSelection();
            }
        }

        function enableLocationSelection() {
            isSelectingLocation = true;
            map.getContainer().style.cursor = 'crosshair';

            const btn = document.getElementById('selectLocationBtn');
            btn.classList.add('active');
            document.getElementById('locationBtnText').textContent = 'Haz clic en el mapa...';

            document.getElementById('addModal').classList.add('minimized');
            document.getElementById('addModalIcon').className = 'fas fa-window-maximize';

            map.on('click', onMapClickForSelection);

            showNotification('Haz clic en el mapa para seleccionar ubicación', 'info');
        }

        function disableLocationSelection() {
            isSelectingLocation = false;
            map.getContainer().style.cursor = '';

            map.off('click', onMapClickForSelection);
        }

        function onMapClickForSelection(e) {
            if (!isSelectingLocation) return;

            if (tempMarker) {
                map.removeLayer(tempMarker);
            }

            tempMarker = L.marker([e.latlng.lat, e.latlng.lng], { icon: customIcons.temp }).addTo(map);

            document.getElementById('latInput').value = e.latlng.lat.toFixed(6);
            document.getElementById('lngInput').value = e.latlng.lng.toFixed(6);

            document.getElementById('locationDisplay').style.display = 'block';
            document.getElementById('locationText').textContent = `Lat: ${e.latlng.lat.toFixed(6)}, Lng: ${e.latlng.lng.toFixed(6)}`;

            disableLocationSelection();

            document.getElementById('addModal').classList.remove('minimized');
            document.getElementById('addModalIcon').className = 'fas fa-window-minimize';

            showNotification('Ubicación capturada correctamente', 'success');
        }

        function handleSubmit(e) {
            e.preventDefault();

            const lat = parseFloat(document.getElementById('latInput').value);
            const lng = parseFloat(document.getElementById('lngInput').value);

            if (!lat || !lng) {
                showNotification('Por favor selecciona una ubicación en el mapa', 'error');
                return;
            }

            const recordData = {
                tipo: document.getElementById('tipoInput').value,
                lat: lat,
                lng: lng,
                solicitante: document.getElementById('solicitanteInput').value,
                urgencia: document.getElementById('urgenciaInput').value,
                prioridad: document.getElementById('prioridadInput').value,
                tiempoAsignado: parseInt(document.getElementById('tiempoInput').value),
                direccion: document.getElementById('direccionInput').value,
                descripcion: document.getElementById('descripcionInput').value
            };

            if (editingRecordId) {
                const index = records.findIndex(r => r.id === editingRecordId);
                if (index !== -1) {
                    records[index] = {
                        ...records[index],
                        ...recordData
                    };
                    showNotification('Punto actualizado exitosamente', 'success');
                }
            } else {
                const newRecord = {
                    id: Date.now(),
                    ...recordData,
                    fechaCreacion: new Date().toISOString()
                };
                records.push(newRecord);
                showNotification('Punto agregado exitosamente', 'success');
            }

            saveRecords();

            if (tempMarker) {
                map.removeLayer(tempMarker);
                tempMarker = null;
            }

            renderMarkers();
            closeAddModal();

            map.setView([lat, lng], 16);
        }

        function deleteRecord(id) {
            if (!confirm('¿Está seguro de eliminar este punto?')) return;

            records = records.filter(r => r.id !== id);

            routes.forEach(route => {
                route.waypoints = route.waypoints.filter(wId => wId !== id);
            });

            saveRecords();
            saveRoutes();
            renderMarkers();
            renderRoutesList();
            showNotification('Punto eliminado', 'success');
        }

        function openInMaps(lat, lng) {
            window.open(`https://www.google.com/maps?q=${lat},${lng}`, '_blank');
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
                showNotification('Modo pantalla completa activado', 'info');
            } else {
                document.exitFullscreen();
                showNotification('Modo pantalla completa desactivado', 'info');
            }
        }

        function exportRoutesToExcel() {
            if (routes.length === 0) {
                showNotification('No hay rutas para exportar', 'error');
                return;
            }

            const data = [];

            routes.forEach(route => {
                const waypoints = route.waypoints.map(id => records.find(r => r.id === id)).filter(r => r);

                waypoints.forEach((waypoint, index) => {
                    data.push({
                        'Ruta': route.name,
                        'Orden': index + 1,
                        'Tipo': getTipoLabel(waypoint.tipo),
                        'Solicitante': waypoint.solicitante,
                        'Dirección': waypoint.direccion,
                        'Urgencia': getUrgenciaLabel(waypoint.urgencia),
                        'Prioridad': getPrioridadLabel(waypoint.prioridad),
                        'Tiempo Asignado (días)': waypoint.tiempoAsignado,
                        'Latitud': waypoint.lat,
                        'Longitud': waypoint.lng,
                        'Descripción': waypoint.descripcion || '',
                        'Link Google Maps': `https://www.google.com/maps?q=${waypoint.lat},${waypoint.lng}`
                    });
                });
            });

            const ws = XLSX.utils.json_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Rutas Trazadas');

            const fileName = `TRAZADO_RUTAS_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(wb, fileName);

            showNotification(`Exportadas ${routes.length} rutas a Excel`, 'success');
        }

        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            const text = document.getElementById('notificationText');
            const icon = notification.querySelector('i');

            if (type === 'success') {
                icon.className = 'fas fa-check-circle';
            } else if (type === 'error') {
                icon.className = 'fas fa-exclamation-circle';
            } else {
                icon.className = 'fas fa-info-circle';
            }

            notification.className = 'notification ' + type + ' show';
            text.textContent = message;

            setTimeout(function() {
                notification.classList.remove('show');
            }, 3000);
        }

        console.log('Sistema de Trazado de Rutas v1.0');
        console.log('Sistema iniciado correctamente');
    </script>
</body>
</html>
           
